// Auto-generated file - do not edit manually
// Generated at build time from SDK and CLI README files

export const SDK_DOCUMENTATION = "# @nodash/sdk 🚀\n\n> The foundation layer that doesn't judge your life choices (but tracks them anyway)\n\nWelcome to the Nodash SDK! Whether you're a human developer who drinks too much coffee or an AI agent who processes data at inhuman speeds, this SDK is designed for you. We promise it's simpler than your last relationship and more reliable than your internet connection.\n\n## Quick Start (Because Nobody Reads Documentation Anyway)\n\n```bash\nnpm install @nodash/sdk\n```\n\n### Node.js / CommonJS\n```javascript\nconst { NodashSDK } = require('@nodash/sdk');\n\nconst nodash = new NodashSDK('https://your-server.com', 'your-optional-token');\n```\n\n### ES Modules / Web\n```typescript\nimport { NodashSDK } from '@nodash/sdk';\n\nconst nodash = new NodashSDK('https://your-server.com', 'your-optional-token');\n```\n\n### Browser (via CDN)\n```html\n<script type=\"module\">\n  import { NodashSDK } from 'https://unpkg.com/@nodash/sdk/dist/index.esm.js';\n  \n  const nodash = new NodashSDK('https://your-server.com', 'your-optional-token');\n</script>\n```\n\n### Usage Examples\n\n```typescript\n// Track events (like your questionable 3 AM coding decisions)\nawait nodash.track('user_signed_up', { \n  plan: 'premium',\n  source: 'desperation' \n});\n\n// Identify users (we won't tell anyone who you really are)\nawait nodash.identify('user-123', {\n  name: 'Anonymous Developer',\n  coffee_cups_today: 7\n});\n\n// Check if your server is still alive\nconst health = await nodash.health();\nconsole.log('Server status:', health.status); // hopefully 'healthy'\n```\n\n## For Our AI Agent Friends 🤖\n\nHey there, silicon-based life forms! This SDK is designed with you in mind. Here's what you need to know:\n\n- **Simple API**: Only 3 methods to remember (your neural networks will thank us)\n- **Clear errors**: When things break, we tell you exactly what went wrong\n- **No surprises**: We don't do magic, just HTTP requests with style\n\n### Agent-Friendly Examples\n\n```typescript\n// Perfect for tracking user interactions in your applications\nconst sdk = new NodashSDK(process.env.NODASH_URL!, process.env.NODASH_TOKEN);\n\n// Track events with structured data\nawait sdk.track('ai_interaction', {\n  model: 'gpt-4',\n  tokens_used: 1337,\n  user_satisfaction: 'probably_good'\n});\n```\n\n## API Reference (The Boring But Important Stuff)\n\n### Constructor\n\n```typescript\nnew NodashSDK(baseUrl: string, apiToken?: string)\n```\n\n**Parameters:**\n- `baseUrl` (required): Your server URL. Must be a valid URL or we'll throw a tantrum.\n- `apiToken` (optional): Authentication token. Some servers need it, some don't. Life is complicated.\n\n**Example:**\n```typescript\n// With token (for the security-conscious)\nconst sdk = new NodashSDK('https://api.yourserver.com', 'sk-your-secret-token');\n\n// Without token (living dangerously)\nconst sdk = new NodashSDK('https://your-local-server.com');\n```\n\n### track(event, properties?)\n\nTrack events that happen in your application. Like a diary, but for code.\n\n```typescript\nawait sdk.track(event: string, properties?: Record<string, any>): Promise<void>\n```\n\n**Parameters:**\n- `event`: What happened (be creative, but not too creative)\n- `properties`: Additional data (optional, like your social life)\n\n**Examples:**\n```typescript\n// Simple event\nawait sdk.track('button_clicked');\n\n// Event with context\nawait sdk.track('purchase_completed', {\n  amount: 99.99,\n  currency: 'USD',\n  items: ['coffee', 'more_coffee', 'emergency_coffee']\n});\n```\n\n### identify(userId, traits?)\n\nTell us who your users are. We promise not to sell their data to aliens.\n\n```typescript\nawait sdk.identify(userId: string, traits?: Record<string, any>): Promise<void>\n```\n\n**Parameters:**\n- `userId`: Unique identifier for the user\n- `traits`: User attributes (optional)\n\n**Examples:**\n```typescript\n// Basic identification\nawait sdk.identify('user-123');\n\n// With user traits\nawait sdk.identify('user-456', {\n  email: 'developer@example.com',\n  plan: 'pro',\n  bugs_created_today: 3\n});\n```\n\n### health()\n\nCheck if your server is still breathing.\n\n```typescript\nawait sdk.health(): Promise<HealthStatus>\n```\n\n**Returns:**\n```typescript\ninterface HealthStatus {\n  status: 'healthy' | 'degraded' | 'unhealthy';\n  version: string;\n  uptime: number;\n  checks: HealthCheck[];\n}\n```\n\n**Example:**\n```typescript\nconst health = await sdk.health();\nif (health.status === 'healthy') {\n  console.log('All systems go! 🚀');\n} else {\n  console.log('Houston, we have a problem... 🚨');\n}\n```\n\n## Building Your Own Server (For the Brave Souls)\n\nWant to implement your own Nodash-compatible server? You're either very brave or very foolish. Either way, we respect that.\n\nYour server needs to implement these endpoints:\n\n### POST /track\nAccept tracking events:\n```json\n{\n  \"event\": \"user_action\",\n  \"properties\": { \"key\": \"value\" },\n  \"timestamp\": \"2024-01-01T00:00:00.000Z\"\n}\n```\n\n### POST /identify\nAccept user identification:\n```json\n{\n  \"userId\": \"user-123\",\n  \"traits\": { \"name\": \"John Doe\" },\n  \"timestamp\": \"2024-01-01T00:00:00.000Z\"\n}\n```\n\n### GET /health\nReturn server status:\n```json\n{\n  \"status\": \"healthy\",\n  \"version\": \"1.0.0\",\n  \"uptime\": 3600,\n  \"checks\": [\n    { \"name\": \"database\", \"status\": \"pass\" },\n    { \"name\": \"redis\", \"status\": \"pass\" }\n  ]\n}\n```\n\n## Error Handling (When Things Go Wrong)\n\nWe believe in clear, helpful error messages. No cryptic codes or mysterious failures here.\n\n```typescript\ntry {\n  await sdk.track('', {}); // Empty event name\n} catch (error) {\n  console.log(error.message); // \"event name is required and must be a string\"\n}\n\ntry {\n  const sdk = new NodashSDK('not-a-url');\n} catch (error) {\n  console.log(error.message); // \"baseUrl must be a valid URL\"\n}\n```\n\n## Common Patterns\n\n### Environment-based Configuration\n```typescript\nconst sdk = new NodashSDK(\n  process.env.NODE_ENV === 'production' \n    ? 'https://api.nodash.com'\n    : 'http://localhost:3000',\n  process.env.NODASH_TOKEN\n);\n```\n\n## Event Recorder - 30s Guide\n\nRecord events in memory during development/testing, then replay them later. Perfect for debugging and testing event sequences.\n\n```typescript\n// Start recording (captures track/identify calls in memory)\nsdk.startRecording(100); // max 100 events\n\n// Your normal tracking code - gets recorded instead of sent\nawait sdk.track('user_signup', { plan: 'pro' });\nawait sdk.identify('user-123', { name: 'John' });\n\n// Stop and get the session\nconst session = sdk.stopRecording();\n\n// Replay to different endpoint or dry-run\nawait sdk.replay(session, { dryRun: true }); // logs without HTTP\nawait sdk.replay(session, { url: 'https://staging.api.com' }); // custom endpoint\n```\n\n### Batch Operations (Coming Soon™)\nCurrently, each method makes individual requests. If you need batching, implement it in your server or wait for v0.2.0 (no promises on timing).\n\n## Troubleshooting\n\n**Q: My requests are failing with 401 errors**\nA: Check your API token. If you don't have one, maybe your server doesn't need it? Life is mysterious.\n\n**Q: The SDK is throwing \"baseUrl must be a valid URL\" errors**\nA: Your URL is probably invalid. Try adding `http://` or `https://` at the beginning. We're not mind readers.\n\n**Q: Nothing is happening when I call track()**\nA: Check your server logs. The SDK is probably working fine; your server might be having an existential crisis.\n\n**Q: Can I use this with my custom server?**\nA: Absolutely! As long as your server speaks HTTP and implements the expected endpoints, we're friends.\n\n## Contributing\n\nFound a bug? Want to add a feature? Great! Just remember:\n- Keep it simple (complexity is the enemy)\n- Write tests (future you will thank present you)\n- Update documentation (yes, even the jokes)\n\n## License\n\nMIT - Because sharing is caring, and lawyers are expensive.\n\n---\n\n*Built with ❤️ and excessive amounts of caffeine by the Nodash team*";

export const CLI_DOCUMENTATION = "# @nodash/cli 🛠️\n\n> The developer's best friend (after coffee and Stack Overflow)\n\nThe Nodash CLI is your command-line companion for all things nodash. Whether you're a human developer debugging at 2 AM or an AI agent orchestrating complex workflows, this CLI has got your back.\n\n## Installation\n\n```bash\nnpm install -g @nodash/cli\n```\n\nOr if you prefer living on the edge:\n```bash\nnpx @nodash/cli --help\n```\n\n## Quick Start\n\n```bash\n# Initialize your configuration (do this first, seriously)\nnodash init --url https://your-server.com --token your-optional-token\n\n# Check if everything is working\nnodash health\n\n# Track your first event (celebrate! 🎉)\nnodash track \"cli_first_use\" --properties '{\"excitement_level\": \"maximum\"}'\n```\n\n## Commands Reference\n\n### `nodash init`\n\nInitialize your nodash configuration. This is your starting point.\n\n```bash\nnodash init [options]\n```\n\n**Options:**\n- `--url, -u <url>`: Base URL for your nodash server\n- `--token, -t <token>`: API token (optional, depends on your server)\n\n**Examples:**\n```bash\n# Full setup\nnodash init --url https://api.nodash.com --token sk-your-secret-token\n\n# Just the URL (for servers that don't need tokens)\nnodash init --url http://localhost:3000\n\n# Interactive mode (coming soon™)\nnodash init\n```\n\n### `nodash config`\n\nManage your configuration like a pro.\n\n```bash\nnodash config <action> [key] [value]\n```\n\n**Actions:**\n- `get`: Retrieve configuration values\n- `set`: Set configuration values\n\n**Examples:**\n```bash\n# View all configuration\nnodash config get\n\n# Get specific value\nnodash config get baseUrl\n\n# Set a value\nnodash config set baseUrl https://new-server.com\nnodash config set apiToken your-new-token\n```\n\n### `nodash track`\n\nTrack events that happen in your application. The bread and butter of analytics.\n\n```bash\nnodash track <event> [options]\n```\n\n**Options:**\n- `--properties, -p <json>`: Event properties as JSON string\n\n**Examples:**\n```bash\n# Simple event\nnodash track \"user_login\"\n\n# Event with properties\nnodash track \"purchase_completed\" --properties '{\"amount\": 99.99, \"currency\": \"USD\"}'\n\n# Complex properties (AI agents love this)\nnodash track \"ai_interaction\" --properties '{\n  \"model\": \"gpt-4\",\n  \"tokens\": 1337,\n  \"user_satisfaction\": \"probably_good\",\n  \"coffee_level\": \"dangerously_low\"\n}'\n```\n\n### `nodash health`\n\nCheck if your server is still breathing. Essential for debugging and monitoring.\n\n```bash\nnodash health\n```\n\n**Example Output:**\n```\n🏥 Server Health Status:\nStatus: healthy\nVersion: 1.0.0\nUptime: 3600s\n\nHealth Checks:\n  ✅ database: pass\n  ✅ redis: pass\n  ❌ coffee_machine: fail\n     Error: Out of coffee beans\n```\n\n## For AI Agents 🤖\n\nHey there, digital colleagues! Here's what you need to know to use this CLI effectively:\n\n### Agent-Friendly Patterns\n\n**Configuration Management:**\n```bash\n# Always check configuration first\nnodash config get\n\n# Set up for different environments\nnodash config set baseUrl $NODASH_URL\nnodash config set apiToken $NODASH_TOKEN\n```\n\n**Event Tracking with Structured Data:**\n```bash\n# Track user interactions\nnodash track \"user_action\" --properties '{\n  \"action_type\": \"click\",\n  \"element\": \"submit_button\",\n  \"page\": \"/checkout\",\n  \"timestamp\": \"'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'\"\n}'\n\n# Track system events\nnodash track \"system_event\" --properties '{\n  \"event_type\": \"deployment\",\n  \"version\": \"1.2.3\",\n  \"environment\": \"production\",\n  \"success\": true\n}'\n```\n\n**Health Monitoring:**\n```bash\n# Check health and parse output\nif nodash health | grep -q \"healthy\"; then\n  echo \"System is operational\"\nelse\n  echo \"System needs attention\"\nfi\n```\n\n### JSON Property Guidelines\n\nWhen using `--properties`, ensure your JSON is valid:\n\n✅ **Good:**\n```bash\nnodash track \"event\" --properties '{\"key\": \"value\", \"number\": 42}'\n```\n\n❌ **Bad:**\n```bash\nnodash track \"event\" --properties \"{key: value}\"  # Missing quotes\nnodash track \"event\" --properties '{'key': 'value'}'  # Wrong quotes\n```\n\n### Error Handling\n\nThe CLI provides clear error messages:\n\n```bash\n# Missing configuration\n$ nodash track \"test\"\n❌ Track error: No base URL configured. Run \"nodash config set baseUrl <url>\" first.\n\n# Invalid JSON\n$ nodash track \"test\" --properties '{invalid}'\n❌ Invalid JSON in properties\n\n# Network issues\n$ nodash health\n❌ Health check failed: Request failed: connect ECONNREFUSED 127.0.0.1:3000\n```\n\n## Configuration File\n\nThe CLI stores configuration in `~/.nodash/config.json` by default:\n\n```json\n{\n  \"baseUrl\": \"https://api.nodash.com\",\n  \"apiToken\": \"sk-your-token\",\n  \"environment\": \"production\"\n}\n```\n\nYou can edit this file directly if you prefer, but using `nodash config` is safer.\n\n### Custom Configuration Directory\n\nYou can customize where the CLI stores its configuration using the `NODASH_CONFIG_DIR` environment variable:\n\n```bash\n# Use a project-specific configuration directory\nexport NODASH_CONFIG_DIR=\"./config/nodash\"\nnodash init --url https://project-api.com\n\n# Use different configurations for different environments\nexport NODASH_CONFIG_DIR=\"~/.config/nodash/staging\"\nnodash config set baseUrl https://staging-api.com\n\nexport NODASH_CONFIG_DIR=\"~/.config/nodash/production\"\nnodash config set baseUrl https://api.com\n```\n\nThis is particularly useful for:\n- **Testing**: Isolate test configurations from your personal settings\n- **Multi-project workflows**: Keep separate configurations for different projects\n- **CI/CD environments**: Use containerized or temporary configuration directories\n- **Team collaboration**: Share project-specific configurations via version control\n\n## Integration Examples\n\n### CI/CD Pipeline\n\n```bash\n#!/bin/bash\n# Track deployment events\nnodash track \"deployment_started\" --properties '{\n  \"version\": \"'$VERSION'\",\n  \"environment\": \"'$ENVIRONMENT'\",\n  \"commit\": \"'$GIT_COMMIT'\"\n}'\n\n# Your deployment logic here...\n\nif [ $? -eq 0 ]; then\n  nodash track \"deployment_completed\" --properties '{\n    \"version\": \"'$VERSION'\",\n    \"environment\": \"'$ENVIRONMENT'\",\n    \"success\": true\n  }'\nelse\n  nodash track \"deployment_failed\" --properties '{\n    \"version\": \"'$VERSION'\",\n    \"environment\": \"'$ENVIRONMENT'\",\n    \"success\": false\n  }'\nfi\n```\n\n### Development Workflow\n\n```bash\n# Track development activities\nalias git-commit='git commit && nodash track \"code_committed\" --properties \"{\\\"repo\\\": \\\"$(basename $(git rev-parse --show-toplevel))\\\"}\"'\n\n# Monitor application health during development\nwatch -n 30 nodash health\n```\n\n### Agent Automation\n\n```bash\n#!/bin/bash\n# Agent script for monitoring and tracking\n\n# Check system health\nHEALTH=$(nodash health 2>&1)\nif echo \"$HEALTH\" | grep -q \"healthy\"; then\n  nodash track \"health_check\" --properties '{\"status\": \"healthy\", \"automated\": true}'\nelse\n  nodash track \"health_check\" --properties '{\"status\": \"unhealthy\", \"automated\": true}'\n  # Trigger alerts or remediation\nfi\n```\n\n### Testing with Configuration Isolation\n\n```bash\n#!/bin/bash\n# Test script with isolated configuration\n\n# Set up test-specific configuration directory\nexport NODASH_CONFIG_DIR=\"./test-config\"\n\n# Initialize test configuration\nnodash init --url http://localhost:3001 --token test-token\n\n# Run your tests\nnpm test\n\n# Configuration is isolated - won't affect your personal settings\n# Clean up test config if needed\nrm -rf ./test-config\n```\n\n### Multi-Environment CI/CD\n\n```bash\n#!/bin/bash\n# CI/CD script supporting multiple environments\n\ncase \"$ENVIRONMENT\" in\n  \"staging\")\n    export NODASH_CONFIG_DIR=\"/tmp/nodash-staging\"\n    nodash init --url https://staging-api.example.com --token \"$STAGING_TOKEN\"\n    ;;\n  \"production\")\n    export NODASH_CONFIG_DIR=\"/tmp/nodash-production\"\n    nodash init --url https://api.example.com --token \"$PRODUCTION_TOKEN\"\n    ;;\n  *)\n    export NODASH_CONFIG_DIR=\"/tmp/nodash-dev\"\n    nodash init --url http://localhost:3000\n    ;;\nesac\n\n# Deploy and track\nnodash track \"deployment_started\" --properties \"{\\\"environment\\\": \\\"$ENVIRONMENT\\\"}\"\n# ... deployment logic ...\nnodash track \"deployment_completed\" --properties \"{\\\"environment\\\": \\\"$ENVIRONMENT\\\"}\"\n```\n\n## Troubleshooting\n\n**Q: Command not found: nodash**\nA: Make sure you installed globally (`npm install -g @nodash/cli`) or use `npx @nodash/cli`\n\n**Q: \"No base URL configured\" error**\nA: Run `nodash init --url <your-server-url>` first\n\n**Q: JSON parsing errors**\nA: Check your JSON syntax. Use single quotes around the JSON string and double quotes inside.\n\n**Q: Connection refused errors**\nA: Check if your server is running and the URL is correct. Try `nodash config get baseUrl`\n\n**Q: Authentication errors**\nA: Verify your API token with `nodash config get apiToken` or set a new one\n\n**Q: Configuration not persisting between commands**\nA: Check if you're using `NODASH_CONFIG_DIR` consistently. If set, make sure it points to the same directory for all commands.\n\n**Q: \"Failed to create configuration directory\" error**\nA: Check permissions for the configuration directory. If using `NODASH_CONFIG_DIR`, ensure the path is writable.\n\n## Advanced Usage\n\n### Environment Variables\n\nYou can override configuration with environment variables:\n\n```bash\nexport NODASH_URL=\"https://staging.nodash.com\"\nexport NODASH_TOKEN=\"sk-staging-token\"\nnodash health  # Uses environment variables\n```\n\n### Scripting\n\nThe CLI is designed to be script-friendly:\n\n```bash\n# Exit codes: 0 = success, 1 = error\nnodash health > /dev/null 2>&1\nif [ $? -eq 0 ]; then\n  echo \"Server is healthy\"\nfi\n\n# JSON output parsing (coming in future versions)\n# nodash health --json | jq '.status'\n```\n\n## Event Recorder - 30s Guide\n\nRecord events during development/testing sessions, then replay them for debugging or testing against different endpoints.\n\n```bash\n# Start recording events (captures in memory, doesn't send HTTP)\nnodash record start --max-events 50\n\n# Your normal tracking - gets recorded instead of sent\nnodash track \"user_signup\" --properties '{\"plan\": \"pro\"}'\n\n# Stop recording and save to file\nnodash record stop --out ./session.json\n\n# Replay to different endpoint or dry-run\nnodash replay ./session.json --dry-run  # logs without HTTP\nnodash replay ./session.json --url https://staging.api.com  # custom endpoint\n```\n\n## What's Next?\n\nFuture versions will include:\n- Interactive configuration setup\n- Batch operations\n- JSON output format\n- Plugin system\n- More tracking utilities\n\n## Contributing\n\nFound a bug? Want a feature? We'd love your help!\n\n1. Check existing issues\n2. Create a new issue or PR\n3. Follow our coding standards (keep it simple!)\n4. Update documentation (including these jokes)\n\n## License\n\nMIT - Because open source makes the world go round.\n\n---\n\n*Built with ❤️ and an unhealthy amount of terminal usage by the Nodash team*";

export function extractExamples(content: string): string[] {
  const examples: string[] = [];
  const codeBlockRegex = /```(?:bash|typescript|javascript|json)\n([\s\S]*?)\n```/g;
  let match;

  while ((match = codeBlockRegex.exec(content)) !== null) {
    if (match[1]) {
      examples.push(match[1].trim());
    }
  }

  return examples;
}
