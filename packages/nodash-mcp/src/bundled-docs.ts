// Auto-generated file - do not edit manually
// Generated at build time from SDK and CLI README files

export const SDK_DOCUMENTATION = "# @nodash/sdk\n\nThe Nodash SDK is the foundation client library for the Nodash analytics ecosystem. It provides a minimal, type-safe interface for event tracking, user identification, and server health monitoring. The SDK is designed for both human developers and AI agents, offering comprehensive functionality with a simple API surface.\n\n## Installation\n\n```bash\nnpm install @nodash/sdk\n```\n\n### Node.js / CommonJS\n```javascript\nconst { NodashSDK } = require('@nodash/sdk');\n\nconst nodash = new NodashSDK('https://your-server.com', 'your-optional-token');\n```\n\n### ES Modules / Web\n```typescript\nimport { NodashSDK } from '@nodash/sdk';\n\nconst nodash = new NodashSDK('https://your-server.com', 'your-optional-token');\n```\n\n### Browser (via CDN)\n```html\n<script type=\"module\">\n  import { NodashSDK } from 'https://unpkg.com/@nodash/sdk/dist/index.esm.js';\n  \n  const nodash = new NodashSDK('https://your-server.com', 'your-optional-token');\n</script>\n```\n\n### Usage Examples\n\n```typescript\n// Track events\nawait nodash.track('user_signed_up', { \n  plan: 'premium',\n  source: 'website' \n});\n\n// Identify users\nawait nodash.identify('user-123', {\n  name: 'John Doe',\n  email: 'john@example.com'\n});\n\n// Check server health\nconst health = await nodash.health();\nconsole.log('Server status:', health.status);\n```\n\n## Architecture\n\nThe Nodash SDK serves as the foundation layer of the Nodash ecosystem:\n\n```\n┌─────────────────┐\n│   @nodash/mcp   │  ← AI Agent Layer\n│  (AI Agents)    │\n└─────────────────┘\n         ↑\n┌─────────────────┐\n│   @nodash/cli   │  ← Developer Layer\n│  (Developer)    │\n└─────────────────┘\n         ↑\n┌─────────────────┐\n│   @nodash/sdk   │  ← Foundation Layer (this package)\n│   (Foundation)  │\n└─────────────────┘\n```\n\nThe SDK provides:\n- **Minimal API Surface**: Core methods for tracking, identification, and health monitoring\n- **Type Safety**: Full TypeScript support with comprehensive type definitions\n- **Error Handling**: Clear, structured error messages for debugging\n- **Multi-tenant Support**: Automatic tenant derivation from API tokens\n\n## Authentication and Multi-tenancy\n\n### API Token Format\n\nThe SDK supports different API token formats for various authentication scenarios:\n\n```typescript\n// Single-tenant token (standard format)\nconst sdk = new NodashSDK('https://api.com', 'sk-your-secret-token');\n\n// Multi-tenant token (tenant auto-derived)\nconst sdk = new NodashSDK('https://api.com', 'demo-api-key-tenant1');\n// Tenant 'tenant1' is automatically extracted from the token\n```\n\n### Tenant Derivation\n\nFor multi-tenant servers, the SDK automatically derives the tenant from the API token pattern:\n\n- Token format: `{prefix}-{suffix}-{tenant}`\n- Example: `demo-api-key-tenant1` → tenant: `tenant1`\n- Example: `prod-key-company-abc` → tenant: `company-abc`\n\n### Custom Headers\n\nYou can provide custom headers for additional authentication or configuration:\n\n```typescript\nconst sdk = new NodashSDK('https://api.com', 'your-token', {\n  headers: {\n    'X-Custom-Auth': 'additional-auth-token',\n    'X-Environment': 'production',\n    'X-Client-Version': '1.0.0'\n  }\n});\n```\n\n### Environment-based Configuration\n\n```typescript\nconst sdk = new NodashSDK(\n  process.env.NODASH_URL!,\n  process.env.NODASH_TOKEN,\n  {\n    headers: {\n      'X-Environment': process.env.NODE_ENV || 'development'\n    }\n  }\n);\n```\n\n### AI Agent Integration\n\n```typescript\nconst sdk = new NodashSDK(process.env.NODASH_URL!, process.env.NODASH_TOKEN);\n\n// Track AI interactions with structured data\nawait sdk.track('ai_interaction', {\n  model: 'gpt-4',\n  tokens_used: 1337,\n  user_satisfaction: 'high',\n  response_time_ms: 250\n});\n```\n\n## API Reference\n\n### Constructor\n\n```typescript\nnew NodashSDK(baseUrl: string, apiToken?: string)\n```\n\n**Parameters:**\n- `baseUrl` (required): Your server URL. Must be a valid URL.\n- `apiToken` (optional): Authentication token. For multi-tenant servers, tenant information is automatically derived from the token pattern (e.g., `demo-api-key-tenant1` → `tenant1`).\n\n**Example:**\n```typescript\n// With token (tenant auto-derived for multi-tenant servers)\nconst sdk = new NodashSDK('https://api.yourserver.com', 'demo-api-key-tenant1');\n\n// With token only (for single-tenant servers)\nconst sdk = new NodashSDK('https://api.yourserver.com', 'sk-your-secret-token');\n\n// Without token (for servers that don't require authentication)\nconst sdk = new NodashSDK('https://your-local-server.com');\n```\n\n### track(event, properties?)\n\nTrack events that happen in your application.\n\n```typescript\nawait sdk.track(event: string, properties?: Record<string, any>): Promise<void>\n```\n\n**Parameters:**\n- `event`: Event name describing what happened\n- `properties`: Additional event data (optional)\n\n**Examples:**\n```typescript\n// Simple event\nawait sdk.track('button_clicked');\n\n// Event with context\nawait sdk.track('purchase_completed', {\n  amount: 99.99,\n  currency: 'USD',\n  items: ['product_1', 'product_2', 'product_3']\n});\n```\n\n### identify(userId, traits?)\n\nIdentify users and associate traits with them.\n\n```typescript\nawait sdk.identify(userId: string, traits?: Record<string, any>): Promise<void>\n```\n\n**Parameters:**\n- `userId`: Unique identifier for the user\n- `traits`: User attributes (optional)\n\n**Examples:**\n```typescript\n// Basic identification\nawait sdk.identify('user-123');\n\n// With user traits\nawait sdk.identify('user-456', {\n  email: 'developer@example.com',\n  plan: 'pro',\n  role: 'developer'\n});\n```\n\n### health()\n\nCheck server health status.\n\n```typescript\nawait sdk.health(): Promise<HealthStatus>\n```\n\n**Returns:**\n```typescript\ninterface HealthStatus {\n  status: 'healthy' | 'degraded' | 'unhealthy';\n  version: string;\n  uptime: number;\n  checks: HealthCheck[];\n}\n```\n\n**Example:**\n```typescript\nconst health = await sdk.health();\nif (health.status === 'healthy') {\n  console.log('Server is operational');\n} else {\n  console.log('Server health check failed');\n}\n```\n\n### getConfig()\n\nGet the current SDK configuration.\n\n```typescript\nsdk.getConfig(): NodashConfig\n```\n\n**Returns:**\n```typescript\ninterface NodashConfig {\n  baseUrl: string;\n  apiToken?: string;\n  environment?: string;\n  customHeaders?: Record<string, string>;\n}\n```\n\n**Example:**\n```typescript\nconst config = sdk.getConfig();\nconsole.log('Base URL:', config.baseUrl);\n```\n\n### queryEvents(options?)\n\nQuery events with filtering and pagination.\n\n```typescript\nsdk.queryEvents(options?: QueryOptions): Promise<QueryResult>\n```\n\n**Parameters:**\n```typescript\ninterface QueryOptions {\n  eventTypes?: string[];\n  userId?: string;\n  startDate?: Date;\n  endDate?: Date;\n  properties?: Record<string, any>;\n  sortBy?: 'timestamp' | 'eventName' | 'userId';\n  sortOrder?: 'asc' | 'desc';\n  limit?: number;\n  offset?: number;\n  format?: 'json' | 'csv';\n}\n```\n\n**Returns:**\n```typescript\ninterface QueryResult {\n  events: AnalyticsEvent[];\n  totalCount: number;\n  hasMore: boolean;\n  pagination: PaginationInfo;\n  executionTime: number;\n}\n\ninterface AnalyticsEvent {\n  eventId: string;\n  tenantId: string;\n  userId?: string;\n  eventName: string;\n  properties: Record<string, any>;\n  timestamp: Date;\n  receivedAt: Date;\n  sessionId?: string;\n  deviceId?: string;\n}\n```\n\n**Example:**\n```typescript\nconst result = await sdk.queryEvents({\n  eventTypes: ['user_signup', 'purchase'],\n  startDate: new Date('2024-01-01'),\n  limit: 100\n});\n\nconsole.log(`Found ${result.totalCount} events`);\nresult.events.forEach(event => {\n  console.log(`${event.eventName} at ${event.timestamp}`);\n});\n```\n\n### queryUsers(options?)\n\nQuery users with filtering and pagination.\n\n```typescript\nsdk.queryUsers(options?: UserQueryOptions): Promise<UserQueryResult>\n```\n\n**Parameters:**\n```typescript\ninterface UserQueryOptions {\n  userId?: string;\n  activeSince?: Date;\n  activeUntil?: Date;\n  properties?: Record<string, any>;\n  sortBy?: 'firstSeen' | 'lastSeen' | 'eventCount' | 'sessionCount';\n  sortOrder?: 'asc' | 'desc';\n  limit?: number;\n  offset?: number;\n  format?: 'json' | 'csv';\n}\n```\n\n**Returns:**\n```typescript\ninterface UserQueryResult {\n  users: UserRecord[];\n  totalCount: number;\n  hasMore: boolean;\n  pagination: PaginationInfo;\n  executionTime: number;\n}\n\ninterface UserRecord {\n  userId: string;\n  tenantId: string;\n  properties: Record<string, any>;\n  firstSeen: Date;\n  lastSeen: Date;\n  sessionCount: number;\n  eventCount: number;\n}\n```\n\n**Example:**\n```typescript\nconst result = await sdk.queryUsers({\n  activeSince: new Date('2024-01-01'),\n  sortBy: 'lastSeen',\n  limit: 50\n});\n\nconsole.log(`Found ${result.totalCount} users`);\nresult.users.forEach(user => {\n  console.log(`User ${user.userId}: ${user.eventCount} events`);\n});\n```\n\n## Server Implementation\n\nTo implement a Nodash-compatible server, your server must support the following endpoints:\n\nYour server needs to implement these endpoints:\n\n### POST /track\nAccept tracking events:\n```json\n{\n  \"event\": \"user_action\",\n  \"properties\": { \"key\": \"value\" },\n  \"timestamp\": \"2024-01-01T00:00:00.000Z\"\n}\n```\n\n### POST /identify\nAccept user identification:\n```json\n{\n  \"userId\": \"user-123\",\n  \"traits\": { \"name\": \"John Doe\" },\n  \"timestamp\": \"2024-01-01T00:00:00.000Z\"\n}\n```\n\n### GET /health\nReturn server status:\n```json\n{\n  \"status\": \"healthy\",\n  \"version\": \"1.0.0\",\n  \"uptime\": 3600,\n  \"checks\": [\n    { \"name\": \"database\", \"status\": \"pass\" },\n    { \"name\": \"redis\", \"status\": \"pass\" }\n  ]\n}\n```\n\n## Error Handling\n\nThe SDK provides comprehensive error handling with clear, structured error messages for debugging and troubleshooting.\n\n### Constructor Errors\n\n```typescript\n// Invalid baseUrl\ntry {\n  const sdk = new NodashSDK('not-a-url');\n} catch (error) {\n  console.log(error.message); // \"baseUrl must be a valid URL\"\n}\n\n// Missing baseUrl\ntry {\n  const sdk = new NodashSDK('');\n} catch (error) {\n  console.log(error.message); // \"baseUrl is required and must be a string\"\n}\n\n// Invalid apiToken\ntry {\n  const sdk = new NodashSDK('https://api.com', '');\n} catch (error) {\n  console.log(error.message); // \"apiToken is required and must be a string\"\n}\n```\n\n### Method Validation Errors\n\n```typescript\n// Track method errors\ntry {\n  await sdk.track('', {}); // Empty event name\n} catch (error) {\n  console.log(error.message); // \"event name is required and must be a string\"\n}\n\ntry {\n  await sdk.track(null); // Invalid event type\n} catch (error) {\n  console.log(error.message); // \"event name is required and must be a string\"\n}\n\n// Identify method errors\ntry {\n  await sdk.identify(''); // Empty userId\n} catch (error) {\n  console.log(error.message); // \"userId is required and must be a string\"\n}\n\ntry {\n  await sdk.identify(null); // Invalid userId type\n} catch (error) {\n  console.log(error.message); // \"userId is required and must be a string\"\n}\n```\n\n### Network and Server Errors\n\n```typescript\ntry {\n  await sdk.track('user_action', { test: true });\n} catch (error) {\n  if (error.code === 'ECONNREFUSED') {\n    console.log('Server is not reachable');\n  } else if (error.status === 401) {\n    console.log('Authentication failed - check your API token');\n  } else if (error.status === 429) {\n    console.log('Rate limit exceeded - please retry later');\n  } else if (error.status >= 500) {\n    console.log('Server error - please try again');\n  } else {\n    console.log('Request failed:', error.message);\n  }\n}\n```\n\n### Error Response Format\n\nWhen server requests fail, the SDK throws errors with the following structure:\n\n```typescript\ninterface SDKError extends Error {\n  status?: number;        // HTTP status code\n  code?: string;          // Error code (e.g., 'ECONNREFUSED')\n  response?: any;         // Server response body\n  requestId?: string;     // Request ID for debugging\n}\n```\n\n### Common Error Scenarios\n\n| Error | Cause | Solution |\n|-------|-------|----------|\n| `baseUrl must be a valid URL` | Invalid URL format | Ensure URL includes protocol (http/https) |\n| `event name is required` | Empty or null event name | Provide a non-empty string for event name |\n| `userId is required` | Empty or null userId | Provide a non-empty string for userId |\n| `401 Unauthorized` | Invalid or missing API token | Check your API token configuration |\n| `429 Too Many Requests` | Rate limit exceeded | Implement retry logic with backoff |\n| `ECONNREFUSED` | Server not reachable | Check server URL and network connectivity |\n| `ETIMEDOUT` | Request timeout | Check network connectivity or increase timeout |\n\n### Error Handling Best Practices\n\n```typescript\nimport { NodashSDK } from '@nodash/sdk';\n\nconst sdk = new NodashSDK(process.env.NODASH_URL, process.env.NODASH_TOKEN);\n\nasync function trackEventSafely(event: string, properties?: Record<string, any>) {\n  try {\n    await sdk.track(event, properties);\n  } catch (error) {\n    // Log error for debugging\n    console.error('Failed to track event:', {\n      event,\n      error: error.message,\n      status: error.status,\n      requestId: error.requestId\n    });\n    \n    // Handle specific error types\n    if (error.status === 429) {\n      // Implement retry with exponential backoff\n      await retryWithBackoff(() => sdk.track(event, properties));\n    } else if (error.status >= 500) {\n      // Queue for retry later\n      queueForRetry(event, properties);\n    }\n    \n    // Don't throw - allow application to continue\n  }\n}\n\nasync function retryWithBackoff(fn: () => Promise<any>, maxRetries = 3) {\n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      return await fn();\n    } catch (error) {\n      if (i === maxRetries - 1) throw error;\n      await new Promise(resolve => setTimeout(resolve, Math.pow(2, i) * 1000));\n    }\n  }\n}\n```\n\n## Common Patterns\n\n## Usage Examples\n\n### Environment-based Configuration\n```typescript\nconst sdk = new NodashSDK(\n  process.env.NODE_ENV === 'production' \n    ? 'https://api.nodash.com'\n    : 'http://localhost:3000',\n  process.env.NODASH_TOKEN\n);\n```\n\n### Web Application Integration\n```typescript\nimport { NodashSDK } from '@nodash/sdk';\n\nconst analytics = new NodashSDK('https://api.example.com', 'your-api-token');\n\n// Track page views\nawait analytics.track('page_view', {\n  page: window.location.pathname,\n  referrer: document.referrer,\n  user_agent: navigator.userAgent\n});\n\n// Track user interactions\ndocument.getElementById('signup-button').addEventListener('click', async () => {\n  await analytics.track('signup_button_clicked', {\n    page: 'landing',\n    button_position: 'header'\n  });\n});\n```\n\n### Server-side Integration\n```typescript\nimport { NodashSDK } from '@nodash/sdk';\n\nconst analytics = new NodashSDK(process.env.NODASH_URL, process.env.NODASH_TOKEN);\n\n// Track API usage\napp.post('/api/users', async (req, res) => {\n  // Create user logic...\n  \n  await analytics.track('user_created', {\n    user_id: newUser.id,\n    plan: newUser.plan,\n    source: req.headers['x-source'] || 'api'\n  });\n  \n  res.json(newUser);\n});\n```\n\n### AI Agent Integration\n```typescript\nimport { NodashSDK } from '@nodash/sdk';\n\nconst analytics = new NodashSDK(process.env.NODASH_URL, process.env.NODASH_TOKEN);\n\n// Track AI interactions\nasync function trackAIInteraction(interaction: AIInteraction) {\n  await analytics.track('ai_interaction', {\n    model: interaction.model,\n    tokens_used: interaction.tokensUsed,\n    response_time_ms: interaction.responseTime,\n    user_satisfaction: interaction.satisfaction,\n    task_type: interaction.taskType\n  });\n}\n\n// Track agent performance\nawait analytics.track('agent_task_completed', {\n  task_id: 'task-123',\n  duration_ms: 1500,\n  success: true,\n  error_count: 0\n});\n```\n\n### Testing and Development\n```typescript\nimport { NodashSDK } from '@nodash/sdk';\n\nconst sdk = new NodashSDK('http://localhost:3000');\n\n// Run your test scenarios\nawait sdk.track('test_event_1', { test: true });\nawait sdk.identify('test-user', { role: 'tester' });\n```\n\n### Batch Operations\nCurrently, each method makes individual HTTP requests. For batch operations, implement batching logic in your server.\n\n## Troubleshooting\n\n**Q: My requests are failing with 401 errors**\nA: Check your API token configuration. Verify that your server requires authentication and that you're providing a valid token.\n\n**Q: The SDK is throwing \"baseUrl must be a valid URL\" errors**\nA: Ensure your URL includes the protocol (http:// or https://) and is properly formatted.\n\n**Q: Nothing is happening when I call track()**\nA: Check your server logs and network connectivity. Verify that your server is running and accessible at the configured URL.\n\n**Q: Can I use this with my custom server?**\nA: Yes, as long as your server implements the required HTTP endpoints (/track, /identify, /health) with the expected request/response formats.\n\n## Contributing\n\nContributions are welcome! Please follow these guidelines:\n- Keep implementations simple and focused\n- Write comprehensive tests for new features\n- Update documentation for any API changes\n\n## License\n\nMIT License\n\n---\n\n*Built by the Nodash team*";

export const CLI_DOCUMENTATION = "# @nodash/cli\n\nThe Nodash CLI is a command-line interface for the Nodash analytics ecosystem. It provides developers and AI agents with comprehensive tools for event tracking, configuration management, and server monitoring. The CLI is built on top of the Nodash SDK and offers both interactive and programmatic usage patterns.\n\n## Installation\n\n```bash\nnpm install -g @nodash/cli\n```\n\nOr run without installation:\n```bash\nnpx @nodash/cli --help\n```\n\n## Architecture\n\nThe CLI operates as the developer layer in the Nodash ecosystem:\n\n```\n┌─────────────────┐\n│   @nodash/mcp   │  ← AI Agent Layer\n│  (AI Agents)    │\n└─────────────────┘\n         ↑\n┌─────────────────┐\n│   @nodash/cli   │  ← Developer Layer (this package)\n│  (Developer)    │\n└─────────────────┘\n         ↑\n┌─────────────────┐\n│   @nodash/sdk   │  ← Foundation Layer\n│   (Foundation)  │\n└─────────────────┘\n```\n\nThe CLI provides:\n- **Command-line Interface**: Direct access to Nodash functionality from terminal\n- **Configuration Management**: Persistent configuration storage and management\n- **Query Interface**: Command-line access to analytics data\n- **Agent Integration**: Structured output and error handling for AI agents\n\n## Quick Start\n\n```bash\n# Initialize your configuration\nnodash init --url https://your-server.com --token your-optional-token\n\n# Check server connectivity\nnodash health\n\n# Track your first event\nnodash track \"cli_first_use\" --properties '{\"source\": \"documentation\"}'\n```\n\n## Commands Reference\n\n### `nodash init`\n\nInitialize your nodash configuration. This command sets up the CLI with your server URL and authentication token.\n\n```bash\nnodash init [options]\n```\n\n**Options:**\n- `--url, -u <url>`: Base URL for your nodash server\n- `--token, -t <token>`: API token (optional, depends on your server)\n\n**Examples:**\n```bash\n# Full setup\nnodash init --url https://api.nodash.com --token sk-your-secret-token\n\n# Just the URL (for servers that don't need tokens)\nnodash init --url http://localhost:3000\n\n# Interactive mode (prompts for configuration)\nnodash init\n```\n\n### `nodash config`\n\nManage your configuration settings.\n\n```bash\nnodash config <action> [key] [value]\n```\n\n**Actions:**\n- `get`: Retrieve configuration values\n- `set`: Set configuration values\n\n**Examples:**\n```bash\n# View all configuration\nnodash config get\n\n# Get specific value\nnodash config get baseUrl\n\n# Set a value\nnodash config set baseUrl https://new-server.com\nnodash config set apiToken your-new-token\n```\n\n### `nodash track`\n\nTrack events that happen in your application.\n\n```bash\nnodash track <event> [options]\n```\n\n**Options:**\n- `--properties, -p <json>`: Event properties as JSON string\n\n**Examples:**\n```bash\n# Simple event\nnodash track \"user_login\"\n\n# Event with properties\nnodash track \"purchase_completed\" --properties '{\"amount\": 99.99, \"currency\": \"USD\"}'\n\n# Complex properties for AI agent tracking\nnodash track \"ai_interaction\" --properties '{\n  \"model\": \"gpt-4\",\n  \"tokens\": 1337,\n  \"user_satisfaction\": \"high\",\n  \"response_time_ms\": 250\n}'\n```\n\n### `nodash health`\n\nCheck server health status. Essential for debugging and monitoring.\n\n```bash\nnodash health\n```\n\n**Example Output:**\n```\n🏥 Server Health Status:\nStatus: healthy\nVersion: 1.0.0\nUptime: 3600s\n\nHealth Checks:\n  ✅ database: pass\n  ✅ redis: pass\n  ❌ storage: fail\n     Error: Connection timeout\n```\n\n### `nodash query events`\n\nQuery events with filtering and pagination options.\n\n```bash\nnodash query events [options]\n```\n\n**Options:**\n- `--type <types>`: Event types (comma-separated)\n- `--user-id <userId>`: Filter by user ID\n- `--start-date <date>`: Start date (ISO 8601 format)\n- `--end-date <date>`: End date (ISO 8601 format)\n- `--properties <json>`: Filter by properties (JSON string)\n- `--sort-by <field>`: Sort by field (timestamp, eventName, userId)\n- `--sort-order <order>`: Sort order (asc, desc)\n- `--limit <number>`: Maximum number of results\n- `--offset <number>`: Number of results to skip\n- `--format <format>`: Output format (json, table, csv)\n\n**Examples:**\n```bash\n# Query recent events\nnodash query events --limit 10 --sort-by timestamp --sort-order desc\n\n# Query specific event types\nnodash query events --type \"user_signup,purchase\" --start-date \"2024-01-01\"\n\n# Query with property filters\nnodash query events --properties '{\"plan\": \"premium\"}' --format table\n```\n\n### `nodash query users`\n\nQuery users with filtering and pagination options.\n\n```bash\nnodash query users [options]\n```\n\n**Options:**\n- `--user-id <userId>`: Filter by specific user ID\n- `--active-since <date>`: Filter users active since date\n- `--active-until <date>`: Filter users active until date\n- `--properties <json>`: Filter by user properties (JSON string)\n- `--sort-by <field>`: Sort by field (firstSeen, lastSeen, eventCount, sessionCount)\n- `--sort-order <order>`: Sort order (asc, desc)\n- `--limit <number>`: Maximum number of results\n- `--offset <number>`: Number of results to skip\n- `--format <format>`: Output format (json, table, csv)\n\n**Examples:**\n```bash\n# Query active users\nnodash query users --active-since \"2024-01-01\" --sort-by lastSeen\n\n# Query users with specific properties\nnodash query users --properties '{\"plan\": \"pro\"}' --format csv\n\n# Query top users by activity\nnodash query users --sort-by eventCount --sort-order desc --limit 20\n```\n\n## AI Agent Integration\n\nThe CLI is designed for programmatic use by AI agents with structured output and comprehensive error handling:\n\n### Agent-Friendly Patterns\n\n**Configuration Management:**\n```bash\n# Verify current configuration\nnodash config get\n\n# Environment-based setup\nnodash config set baseUrl $NODASH_URL\nnodash config set apiToken $NODASH_TOKEN\nnodash config set environment $ENVIRONMENT\n```\n\n**Event Tracking with Structured Data:**\n```bash\n# Track user interactions with comprehensive metadata\nnodash track \"user_action\" --properties '{\n  \"action_type\": \"click\",\n  \"element\": \"submit_button\",\n  \"page\": \"/checkout\",\n  \"timestamp\": \"'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'\",\n  \"user_agent\": \"AI-Agent/1.0\",\n  \"session_id\": \"session-123\"\n}'\n\n# Track system events with deployment context\nnodash track \"system_event\" --properties '{\n  \"event_type\": \"deployment\",\n  \"version\": \"1.2.3\",\n  \"environment\": \"production\",\n  \"success\": true,\n  \"duration_ms\": 45000,\n  \"commit_hash\": \"'$GIT_COMMIT'\"\n}'\n\n# Track AI agent interactions\nnodash track \"ai_interaction\" --properties '{\n  \"model\": \"gpt-4\",\n  \"tokens_used\": 1337,\n  \"response_time_ms\": 250,\n  \"task_type\": \"code_generation\",\n  \"success\": true\n}'\n```\n\n**Health Monitoring and Error Handling:**\n```bash\n# Check health with structured error handling\nif nodash health | grep -q \"healthy\"; then\n  echo \"System operational\"\n  exit 0\nelse\n  echo \"System health check failed\"\n  exit 1\nfi\n\n# Parse health output for detailed status\nHEALTH_OUTPUT=$(nodash health 2>&1)\nif echo \"$HEALTH_OUTPUT\" | grep -q \"healthy\"; then\n  echo \"All systems operational\"\nelse\n  echo \"Health issues detected: $HEALTH_OUTPUT\"\nfi\n```\n\n**Data Querying for Analysis:**\n```bash\n# Query recent events for analysis\nnodash query events --limit 100 --format json > recent_events.json\n\n# Query user activity for specific time period\nnodash query users --active-since \"2024-01-01\" --format csv > user_activity.csv\n\n# Query specific event types with filters\nnodash query events --type \"error,warning\" --start-date \"2024-01-01\" --format table\n```\n\n### JSON Property Guidelines\n\nWhen using `--properties`, ensure your JSON is valid:\n\n✅ **Good:**\n```bash\nnodash track \"event\" --properties '{\"key\": \"value\", \"number\": 42}'\n```\n\n❌ **Bad:**\n```bash\nnodash track \"event\" --properties \"{key: value}\"  # Missing quotes\nnodash track \"event\" --properties '{'key': 'value'}'  # Wrong quotes\n```\n\n### Error Handling\n\nThe CLI provides clear error messages:\n\n```bash\n# Missing configuration\n$ nodash track \"test\"\n❌ Track error: No base URL configured. Run \"nodash config set baseUrl <url>\" first.\n\n# Invalid JSON\n$ nodash track \"test\" --properties '{invalid}'\n❌ Invalid JSON in properties\n\n# Network issues\n$ nodash health\n❌ Health check failed: Request failed: connect ECONNREFUSED 127.0.0.1:3000\n```\n\n## Configuration File\n\nThe CLI stores configuration in `~/.nodash/config.json` by default:\n\n```json\n{\n  \"baseUrl\": \"https://api.nodash.com\",\n  \"apiToken\": \"sk-your-token\",\n  \"environment\": \"production\"\n}\n```\n\nYou can edit this file directly if you prefer, but using `nodash config` is safer.\n\n### Configuration Options\n\n| Key | Description | Default | Environment Variable |\n|-----|-------------|---------|---------------------|\n| `baseUrl` | Server URL | None | `NODASH_URL` |\n| `apiToken` | Authentication token | None | `NODASH_TOKEN` |\n| `environment` | Environment name | None | `NODASH_ENVIRONMENT` |\n| `timeout` | Request timeout (ms) | 5000 | `NODASH_TIMEOUT` |\n| `retries` | Max retry attempts | 3 | `NODASH_RETRIES` |\n| `customHeaders` | Additional HTTP headers | {} | N/A |\n\n### Environment Variable Override\n\nEnvironment variables take precedence over configuration file settings:\n\n```bash\nexport NODASH_URL=\"https://api.example.com\"\nexport NODASH_TOKEN=\"your-api-token\"\nexport NODASH_ENVIRONMENT=\"production\"\nexport NODASH_TIMEOUT=\"10000\"\n\n# Commands will use environment variables\nnodash health\nnodash track \"test_event\"\n```\n\n### Custom Configuration Directory\n\nYou can customize where the CLI stores its configuration using the `NODASH_CONFIG_DIR` environment variable:\n\n```bash\n# Use a project-specific configuration directory\nexport NODASH_CONFIG_DIR=\"./config/nodash\"\nnodash init --url https://project-api.com\n\n# Use different configurations for different environments\nexport NODASH_CONFIG_DIR=\"~/.config/nodash/staging\"\nnodash config set baseUrl https://staging-api.com\n\nexport NODASH_CONFIG_DIR=\"~/.config/nodash/production\"\nnodash config set baseUrl https://api.com\n```\n\nThis is particularly useful for:\n- **Testing**: Isolate test configurations from your personal settings\n- **Multi-project workflows**: Keep separate configurations for different projects\n- **CI/CD environments**: Use containerized or temporary configuration directories\n- **Team collaboration**: Share project-specific configurations via version control\n\n## Comprehensive Usage Examples\n\n### CI/CD Pipeline Integration\n\n```bash\n#!/bin/bash\n# Comprehensive deployment tracking script\n\n# Set up environment-specific configuration\nexport NODASH_CONFIG_DIR=\"/tmp/nodash-${ENVIRONMENT}\"\nnodash init --url \"$NODASH_URL\" --token \"$NODASH_TOKEN\"\n\n# Track deployment start with comprehensive metadata\nnodash track \"deployment_started\" --properties '{\n  \"version\": \"'$VERSION'\",\n  \"environment\": \"'$ENVIRONMENT'\",\n  \"commit\": \"'$GIT_COMMIT'\",\n  \"branch\": \"'$GIT_BRANCH'\",\n  \"triggered_by\": \"'$TRIGGERED_BY'\",\n  \"pipeline_id\": \"'$PIPELINE_ID'\",\n  \"timestamp\": \"'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'\"\n}'\n\n# Pre-deployment health check\nif ! nodash health > /dev/null 2>&1; then\n  nodash track \"deployment_failed\" --properties '{\n    \"version\": \"'$VERSION'\",\n    \"environment\": \"'$ENVIRONMENT'\",\n    \"failure_reason\": \"pre_deployment_health_check_failed\",\n    \"stage\": \"pre_deployment\"\n  }'\n  exit 1\nfi\n\n# Execute deployment\nDEPLOY_START=$(date +%s)\n./deploy.sh\nDEPLOY_EXIT_CODE=$?\nDEPLOY_END=$(date +%s)\nDEPLOY_DURATION=$((DEPLOY_END - DEPLOY_START))\n\n# Track deployment completion\nif [ $DEPLOY_EXIT_CODE -eq 0 ]; then\n  nodash track \"deployment_completed\" --properties '{\n    \"version\": \"'$VERSION'\",\n    \"environment\": \"'$ENVIRONMENT'\",\n    \"success\": true,\n    \"duration_seconds\": '$DEPLOY_DURATION',\n    \"stage\": \"deployment\"\n  }'\n  \n  # Post-deployment verification\n  sleep 30\n  if nodash health | grep -q \"healthy\"; then\n    nodash track \"deployment_verified\" --properties '{\n      \"version\": \"'$VERSION'\",\n      \"environment\": \"'$ENVIRONMENT'\",\n      \"verification_passed\": true\n    }'\n  else\n    nodash track \"deployment_verification_failed\" --properties '{\n      \"version\": \"'$VERSION'\",\n      \"environment\": \"'$ENVIRONMENT'\",\n      \"verification_passed\": false\n    }'\n  fi\nelse\n  nodash track \"deployment_failed\" --properties '{\n    \"version\": \"'$VERSION'\",\n    \"environment\": \"'$ENVIRONMENT'\",\n    \"success\": false,\n    \"exit_code\": '$DEPLOY_EXIT_CODE',\n    \"duration_seconds\": '$DEPLOY_DURATION',\n    \"stage\": \"deployment\"\n  }'\n  exit $DEPLOY_EXIT_CODE\nfi\n```\n\n### Development Workflow Integration\n\n```bash\n#!/bin/bash\n# Enhanced development workflow tracking\n\n# Set up development environment configuration\nexport NODASH_CONFIG_DIR=\"$HOME/.config/nodash/dev\"\nnodash init --url \"http://localhost:3000\"\n\n# Enhanced git commit tracking\nfunction enhanced_git_commit() {\n  local commit_message=\"$1\"\n  local repo_name=$(basename $(git rev-parse --show-toplevel))\n  local branch_name=$(git rev-parse --abbrev-ref HEAD)\n  local commit_hash=$(git rev-parse HEAD)\n  local files_changed=$(git diff --name-only HEAD~1 | wc -l)\n  \n  git commit -m \"$commit_message\"\n  \n  if [ $? -eq 0 ]; then\n    nodash track \"code_committed\" --properties '{\n      \"repo\": \"'$repo_name'\",\n      \"branch\": \"'$branch_name'\",\n      \"commit_hash\": \"'$commit_hash'\",\n      \"message\": \"'$commit_message'\",\n      \"files_changed\": '$files_changed',\n      \"timestamp\": \"'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'\"\n    }'\n  fi\n}\n\n# Continuous health monitoring with alerting\nfunction monitor_health() {\n  while true; do\n    if ! nodash health > /dev/null 2>&1; then\n      nodash track \"development_server_down\" --properties '{\n        \"timestamp\": \"'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'\",\n        \"environment\": \"development\"\n      }'\n      echo \"⚠️  Development server health check failed\"\n    fi\n    sleep 30\n  done\n}\n\n# Start background health monitoring\nmonitor_health &\nMONITOR_PID=$!\n\n# Cleanup on script exit\ntrap \"kill $MONITOR_PID 2>/dev/null\" EXIT\n```\n\n### Agent Automation\n\n```bash\n#!/bin/bash\n# Agent script for monitoring and tracking\n\n# Check system health\nHEALTH=$(nodash health 2>&1)\nif echo \"$HEALTH\" | grep -q \"healthy\"; then\n  nodash track \"health_check\" --properties '{\"status\": \"healthy\", \"automated\": true}'\nelse\n  nodash track \"health_check\" --properties '{\"status\": \"unhealthy\", \"automated\": true}'\n  # Trigger alerts or remediation\nfi\n```\n\n### Testing with Configuration Isolation\n\n```bash\n#!/bin/bash\n# Test script with isolated configuration\n\n# Set up test-specific configuration directory\nexport NODASH_CONFIG_DIR=\"./test-config\"\n\n# Initialize test configuration\nnodash init --url http://localhost:3001 --token test-token\n\n# Run your tests\nnpm test\n\n# Configuration is isolated - won't affect your personal settings\n# Clean up test config if needed\nrm -rf ./test-config\n```\n\n### Multi-Environment CI/CD\n\n```bash\n#!/bin/bash\n# CI/CD script supporting multiple environments\n\ncase \"$ENVIRONMENT\" in\n  \"staging\")\n    export NODASH_CONFIG_DIR=\"/tmp/nodash-staging\"\n    nodash init --url https://staging-api.example.com --token \"$STAGING_TOKEN\"\n    ;;\n  \"production\")\n    export NODASH_CONFIG_DIR=\"/tmp/nodash-production\"\n    nodash init --url https://api.example.com --token \"$PRODUCTION_TOKEN\"\n    ;;\n  *)\n    export NODASH_CONFIG_DIR=\"/tmp/nodash-dev\"\n    nodash init --url http://localhost:3000\n    ;;\nesac\n\n# Deploy and track\nnodash track \"deployment_started\" --properties \"{\\\"environment\\\": \\\"$ENVIRONMENT\\\"}\"\n# ... deployment logic ...\nnodash track \"deployment_completed\" --properties \"{\\\"environment\\\": \\\"$ENVIRONMENT\\\"}\"\n```\n\n## Troubleshooting\n\n### Common Issues and Solutions\n\n| Issue | Cause | Solution |\n|-------|-------|----------|\n| `Command not found: nodash` | CLI not installed globally | Run `npm install -g @nodash/cli` or use `npx @nodash/cli` |\n| `No base URL configured` | Missing configuration | Run `nodash init --url <your-server-url>` |\n| `JSON parsing errors` | Invalid JSON syntax | Use single quotes around JSON string, double quotes inside |\n| `Connection refused` | Server not reachable | Verify server URL and network connectivity |\n| `401 Unauthorized` | Invalid API token | Check token with `nodash config get apiToken` |\n| `Configuration not persisting` | Inconsistent `NODASH_CONFIG_DIR` | Ensure environment variable points to same directory |\n| `Permission denied` | Insufficient file permissions | Check write permissions for configuration directory |\n\n### Debug Mode\n\nEnable debug output for troubleshooting:\n\n```bash\nexport DEBUG=nodash:*\nnodash track \"debug_event\"\n```\n\n### Configuration Validation\n\nValidate your current configuration:\n\n```bash\n# Check all configuration values\nnodash config get\n\n# Test connectivity\nnodash health\n\n# Verify token format (for multi-tenant setups)\nnodash config get apiToken | grep -E '^[a-zA-Z0-9]+-[a-zA-Z0-9]+-[a-zA-Z0-9]+$'\n```\n\n### Error Codes and Handling\n\nThe CLI uses standard exit codes for programmatic error handling:\n\n| Exit Code | Meaning | Common Causes | Recovery Actions |\n|-----------|---------|---------------|------------------|\n| 0 | Success | Command completed successfully | Continue normal operation |\n| 1 | General error | Unexpected failures | Check logs, retry operation |\n| 2 | Configuration error | Missing or invalid config | Run `nodash init` or fix config |\n| 3 | Network error | Server unreachable | Check connectivity, verify URL |\n| 4 | Authentication error | Invalid or missing token | Verify token, check permissions |\n| 5 | Validation error | Invalid parameters or data | Check command syntax and data |\n\n### Error Response Format\n\nCLI commands return structured error information:\n\n```bash\n# Successful command\n$ nodash health\n✅ Server healthy\n\n# Error with details\n$ nodash track \"\"\n❌ Validation Error: Event name is required\n   Command: nodash track \"\"\n   Error Code: 5\n   Suggestion: Provide a non-empty event name\n   \n# Network error with context\n$ nodash health\n❌ Network Error: Connection refused\n   Server: https://api.example.com\n   Error Code: 3\n   Suggestion: Check server status and network connectivity\n```\n\n### Programmatic Error Handling\n\n```bash\n#!/bin/bash\n# Robust error handling in scripts\n\nexecute_with_retry() {\n    local command=\"$1\"\n    local max_retries=3\n    local retry_delay=2\n    \n    for ((i=1; i<=max_retries; i++)); do\n        if eval \"$command\"; then\n            return 0\n        fi\n        \n        local exit_code=$?\n        echo \"Attempt $i failed with exit code $exit_code\"\n        \n        case $exit_code in\n            2) # Configuration error - don't retry\n                echo \"Configuration error - manual intervention required\"\n                return $exit_code\n                ;;\n            3) # Network error - retry with backoff\n                if [ $i -lt $max_retries ]; then\n                    echo \"Network error - retrying in ${retry_delay}s...\"\n                    sleep $retry_delay\n                    retry_delay=$((retry_delay * 2))\n                fi\n                ;;\n            4) # Authentication error - don't retry\n                echo \"Authentication error - check token\"\n                return $exit_code\n                ;;\n            5) # Validation error - don't retry\n                echo \"Validation error - check command parameters\"\n                return $exit_code\n                ;;\n        esac\n    done\n    \n    echo \"Command failed after $max_retries attempts\"\n    return $exit_code\n}\n\n# Usage examples\nif execute_with_retry \"nodash health\"; then\n    echo \"Health check successful\"\nelse\n    echo \"Health check failed permanently\"\n    exit 1\nfi\n\nif execute_with_retry \"nodash track 'deployment' --properties '{\\\"version\\\": \\\"1.0.0\\\"}'\"; then\n    echo \"Event tracked successfully\"\nelse\n    echo \"Failed to track deployment event\"\nfi\n```\n\n## Advanced Usage\n\n### Environment Variables\n\nOverride configuration with environment variables for different environments:\n\n```bash\n# Production environment\nexport NODASH_URL=\"https://api.nodash.com\"\nexport NODASH_TOKEN=\"prod-api-key-company\"\nexport NODASH_ENVIRONMENT=\"production\"\n\n# Staging environment\nexport NODASH_URL=\"https://staging.api.nodash.com\"\nexport NODASH_TOKEN=\"staging-api-key-company\"\nexport NODASH_ENVIRONMENT=\"staging\"\n\n# Development environment\nexport NODASH_URL=\"http://localhost:3000\"\nunset NODASH_TOKEN  # No auth required for local dev\nexport NODASH_ENVIRONMENT=\"development\"\n```\n\n### Scripting and Automation\n\nThe CLI is designed for programmatic use with structured output and reliable exit codes:\n\n```bash\n#!/bin/bash\n# Script-friendly usage patterns\n\n# Health check with proper error handling\ncheck_health() {\n  local output\n  output=$(nodash health 2>&1)\n  local exit_code=$?\n  \n  if [ $exit_code -eq 0 ]; then\n    echo \"✅ Server healthy\"\n    return 0\n  else\n    echo \"❌ Server unhealthy: $output\"\n    return $exit_code\n  fi\n}\n\n# Event tracking with error handling\ntrack_event() {\n  local event=\"$1\"\n  local properties=\"$2\"\n  \n  if nodash track \"$event\" --properties \"$properties\" > /dev/null 2>&1; then\n    echo \"Event tracked: $event\"\n  else\n    echo \"Failed to track event: $event\" >&2\n    return 1\n  fi\n}\n\n# Batch event processing\nprocess_events() {\n  local events_file=\"$1\"\n  \n  while IFS=',' read -r event properties; do\n    track_event \"$event\" \"$properties\" || {\n      echo \"Failed to process event: $event\" >&2\n      continue\n    }\n  done < \"$events_file\"\n}\n\n# Query data with output formatting\nexport_user_data() {\n  local start_date=\"$1\"\n  local output_file=\"$2\"\n  \n  nodash query users \\\n    --active-since \"$start_date\" \\\n    --format csv \\\n    --limit 1000 > \"$output_file\"\n    \n  if [ $? -eq 0 ]; then\n    echo \"User data exported to $output_file\"\n  else\n    echo \"Failed to export user data\" >&2\n    return 1\n  fi\n}\n```\n\n### Output Parsing\n\nParse CLI output for integration with other tools:\n\n```bash\n# Parse health status\nHEALTH_STATUS=$(nodash health --format json | jq -r '.status')\nif [ \"$HEALTH_STATUS\" = \"healthy\" ]; then\n  echo \"System operational\"\nfi\n\n# Parse query results\nEVENT_COUNT=$(nodash query events --limit 1 --format json | jq -r '.totalCount')\necho \"Total events: $EVENT_COUNT\"\n\n# Extract configuration values\nBASE_URL=$(nodash config get baseUrl)\necho \"Configured server: $BASE_URL\"\n``` for load testing\n## Contributing\n\nContributions are welcome! Please follow these guidelines:\n\n1. **Issues**: Check existing issues before creating new ones\n2. **Pull Requests**: Create focused PRs with clear descriptions\n3. **Code Style**: Follow established TypeScript and formatting conventions\n4. **Testing**: Add tests for new features and ensure existing tests pass\n5. **Documentation**: Update documentation for any CLI changes or new commands\n\n## License\n\nMIT License\n\n---\n\n*Built by the Nodash team*";

export function extractExamples(content: string): string[] {
  const examples: string[] = [];
  const codeBlockRegex = /```(?:bash|typescript|javascript|json)\n([\s\S]*?)\n```/g;
  let match;

  while ((match = codeBlockRegex.exec(content)) !== null) {
    if (match[1]) {
      examples.push(match[1].trim());
    }
  }

  return examples;
}
